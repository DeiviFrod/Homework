{
	"info": {
		"_postman_id": "6d4d38fb-1b4d-4581-8e99-e317bfb398e8",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"console.log(\"name = \" + responseJson.name + \" = \" + typeof(responseJson.name))\r",
							"console.log(\"age = \" + responseJson.age + \" = \" + typeof(responseJson.age))\r",
							"console.log(\"salary = \" + responseJson.salary + \" = \" + typeof(responseJson.salary))\r",
							"pm.test(\"name = Vladislav / age = 26 / salary = 1000\", function () {\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"    pm.expect(responseJson.name).to.eql(\"Vladislav\");\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"    pm.expect(responseJson.age).to.eql(\"26\");\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"    pm.expect(responseJson.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"var requestJson = (request.data)\r",
							"pm.test(\"name.req = name.res / age.req = age.res / salary.req = salary.res\", function () {\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.expect(responseJson.age).to.eql(requestJson.age);\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    console.log (\"req Salry = \" + requestJson.salary + typeof(requestJson.salary))\r",
							"    var sal = +requestJson.salary\r",
							"    pm.expect(responseJson.salary).to.eql(sal);\r",
							"    console.log (\"req Salry = \" + sal + typeof(sal))\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"    console.log(responseJson.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"    var sal1_5 = responseJson.family.u_salary_1_5_year\r",
							"    console.log (\"u_salary_1_5_year\" + sal1_5 + typeof(sal1_5))\r",
							"    pm.expect(sal1_5).to.eql(sal*4)\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vladislav",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var responseJson = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var requestJson = pm.request.toJSON().url.query;\r",
							"console.log (requestJson)\r",
							"pm.test(\"Проверка значений\", function(){\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.expect(responseJson.name).to.eql(requestJson[0].value)\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.expect(responseJson.age).to.eql(requestJson[1].value)\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)   \r",
							"    var reqsal = +requestJson[2].value\r",
							"    pm.expect(responseJson.salary).to.eql(reqsal)   \r",
							"})\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(responseJson.family)\r",
							"console.log(responseJson)\r",
							"console.log(responseJson.family.pets.dog)\r",
							"\r",
							"pm.test(\"Dog have = name/age\", function () {\r",
							"    //9. Проверить, что у параметра dog есть параметры name.\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property(\"name\")\r",
							"    //10. Проверить, что у параметра dog есть параметры age.\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property(\"age\")\r",
							"    //11. Проверить, что параметр name имеет значение Luky.\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.have.include(\"Luky\")\r",
							"    //12. Проверить, что параметр age имеет значение 4.\r",
							"    var dogage = responseJson.family.pets.dog.age\r",
							"    console.log(typeof(dogage))\r",
							"    pm.expect(dogage).to.eql(4)\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Vladislav&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vladislav"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"status 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"//3. Спарсить response body в json.\r",
							"var responseJson = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var requestJson = pm.request.toJSON().url.query;\r",
							"console.log(requestJson)\r",
							"console.log(responseJson)\r",
							"pm.test(\"checking values\", function () {\r",
							"    //5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.expect(responseJson.name).to.eql(requestJson[0].value);\r",
							"    //6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"    var ageReq = +requestJson[1].value\r",
							"    pm.expect(responseJson.age).to.eql(ageReq)\r",
							"    //7. Вывести в консоль параметр salary из request.\r",
							"    console.log (requestJson[2])\r",
							"    //8. Вывести в консоль параметр salary из response.\r",
							"    console.log (responseJson.salary)\r",
							"    //9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"    console.log (responseJson.salary[0])\r",
							"    //10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"    console.log (responseJson.salary[1])\r",
							"    console.log (responseJson.salary[2])\r",
							"    //11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"    console.log (typeof (requestJson[2].value))\r",
							"    //12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    console.log (typeof (responseJson.salary[0]))\r",
							"    var salReq = +requestJson[2].value\r",
							"    pm.expect(responseJson.salary[0]).to.eql(salReq)\r",
							"    //13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    var salRes1 = +responseJson.salary[1]\r",
							"    pm.expect(salRes1).to.eql(salReq*2)\r",
							"    //14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"    var salRes2 = +responseJson.salary[2]\r",
							"    pm.expect(salRes2).to.eql(salReq*3)\r",
							"    //18. Передать в окружение переменную name\r",
							"    pm.environment.set(\"name\", responseJson.name);\r",
							"    //19. Передать в окружение переменную age\r",
							"    pm.environment.set(\"age\", responseJson.age);\r",
							"    //20. Передать в окружение переменную salary\r",
							"    pm.environment.set(\"salary\", responseJson.salary[0])\r",
							"});\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var cikl in responseJson.salary) {\r",
							"    console.log(cikl, responseJson.salary[cikl]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Vladislav&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vladislav"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//6. Спарсить response body в json.\r",
							"var responseJson = pm.response.json()\r",
							"//7. Спарсить request.\r",
							"var requestJson = (request.data)\r",
							"//5. Статус код 200\r",
							"pm.test(\"status is 200\", function (){\r",
							"    pm.response.to.have.status (200)\r",
							"})\r",
							"\r",
							"pm.test (\"check param\", function (){\r",
							"    //8. Проверить, что json response имеет параметр start_qa_salary\r",
							"    pm.expect(responseJson).to.have.property(\"start_qa_salary\")\r",
							"    //9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_6_months\")\r",
							"    ////10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_12_months\")\r",
							"    //11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"    //12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"    //13. Проверить, что json response имеет параметр person\r",
							"    pm.expect(responseJson).to.have.property(\"person\")\r",
							"    //14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"    var reqSal = +requestJson.salary\r",
							"    pm.expect (responseJson.start_qa_salary).to.eql(reqSal)\r",
							"    //15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"        pm.expect(responseJson.qa_salary_after_6_months).to.eql(reqSal*2)\r",
							"    //16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"        pm.expect(responseJson.qa_salary_after_12_months).to.eql(reqSal*2.7)\r",
							"    //17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"        pm.expect(responseJson[\"qa_salary_after_1.5_year\"]).to.eql(reqSal*3.3)\r",
							"    //18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"        pm.expect(responseJson[\"qa_salary_after_3.5_years\"]).to.eql(reqSal*3.8)\r",
							"    //19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"        pm.expect(responseJson.person.u_name[1]).to.eql(reqSal)\r",
							"    //20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"        var reqAge = +requestJson.age\r",
							"        pm.expect(responseJson.person.u_age).to.eql(reqAge)\r",
							"    //21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"        pm.expect(responseJson.person.u_salary_5_years).to.eql(reqSal*4.2)\r",
							"    //22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"        for (var sas in responseJson.person) { \r",
							"        console.log(sas, responseJson.person[sas]);}\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}